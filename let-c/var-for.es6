//探讨:a[x]()输出的内容是什么
var a = []
for(var i = 0; i < 10; i++) {
	a[i] = function() {
		console.log(i);
	};
}

a[6]();//猜想是:10, 结果:10
a[2]();//猜想:10,结果:10
//解析:所有数组a的成员里面的i，指向的都是同一个i,这个i为全局变量


//探讨b[x]()输出的内容是什么
var b = []

for(let i = 0; i < 10; i++) {
	b[i] = function() {
		console.log(i)
	}
}

b[2](); //猜想:2, 结果:2
b[6]();//结果:6
//解析:变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，
//所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的。
//那它怎么知道上一轮循环的值，从而计算出本轮循环的值？
//这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。


//父作用域和子作用域该如何理解
for(let i = 0; i < 3; i++) {
	let i = "abc"
	console.log(i)//连续3次输出abc
}
//解析:for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。
//所以:函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。